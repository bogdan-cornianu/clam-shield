import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import { Worker } from 'worker_threads';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null = null;
let clamavWorker: Worker | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    autoHideMenuBar: true,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// Handle the "browse" event to open a directory dialog
ipcMain.handle('dialog:openDirectory', async () => {
  if (mainWindow) {
    const result = await dialog.showOpenDialog(mainWindow, {
      properties: ['openDirectory'],
    });
    return result.filePaths[0]; // Return the selected directory path
  }
});

ipcMain.on('scan-directory', (event, filePath: string, maxSizeMB: number) => {
    if (!clamavWorker) {
        event.sender.send('scan-status', 'ClamAV worker is not running.');
        return;
    }

    clamavWorker.postMessage({ command: 'scan-directory', filePath, maxSizeMB });
});

function startClamAVWorker() {
    clamavWorker = new Worker('./src/workers/clamavWorker.ts');

    clamavWorker.on('message', (message) => {
        if (message.status === 'success') {
            console.log(`Loaded ${message.sigCount} virus signatures.`);
            mainWindow?.webContents.send('database-status', `Loaded ${message.sigCount} virus signatures.`);
        } else if (message.status === 'error') {
            console.error('Error:', message.message);
            mainWindow?.webContents.send('database-status', message.message);
        } else if (message.status === 'scan-completed') {
            console.error('Error:', message.message);
            mainWindow?.webContents.send('scan-status', message.message);
        } else {
            mainWindow?.webContents.send('scan-status', message);
        }
    });

    clamavWorker.on('error', (error) => {
        console.error('Worker error:', error);
        mainWindow?.webContents.send('database-status', `Error: ${error.message}`);
    });

    clamavWorker.on('exit', (code) => {
        if (code !== 0) {
            console.error(`Worker stopped with exit code ${code}`);
            mainWindow?.webContents.send('database-status', `Worker stopped with exit code ${code}`);
        }
    });

    // Tell the worker to load the database
    clamavWorker.postMessage({ command: 'load-database' });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    createWindow();
    startClamAVWorker();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

